name: Build & Deploy Pages (tools)

on:
  push:
    branches: [ main ]            # ← change if your default branch isn't main
  workflow_dispatch: {}

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Generate /tools/index.html and a root redirect without heredocs
      - name: Generate tools index
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Ensure tools/ exists
            const root = 'tools';
            if (!fs.existsSync(root)) fs.mkdirSync(root, { recursive: true });

            // Read direct entries in tools/
            const entries = fs.readdirSync(root, { withFileTypes: true });

            // Direct files ending in .html/.htm (exclude index.html)
            const direct = entries
              .filter(e => e.isFile() && /\.html?$/i.test(e.name) && !/^index\.html?$/i.test(e.name))
              .map(e => e.name)
              .sort((a,b) => a.localeCompare(b));

            // One-level subfolders that contain an index.html/htm
            const subidx = entries
              .filter(e => e.isDirectory())
              .map(d => {
                const p1 = path.join(root, d.name, 'index.html');
                const p2 = path.join(root, d.name, 'index.htm');
                return (fs.existsSync(p1) || fs.existsSync(p2)) ? d.name : null;
              })
              .filter(Boolean)
              .sort((a,b) => a.localeCompare(b));

            // Visuals
            const label = s => s.replace(/\.html?$/i,'');
            const hue = (str) => {
              let h = 2166136261 >>> 0;
              for (const ch of str) { h ^= ch.charCodeAt(0); h = Math.imul(h, 16777619) >>> 0; }
              return h % 360;
            };
            const grad = (k) => {
              const h = hue(k), h2 = (h + 24) % 360;
              return `linear-gradient(180deg, hsl(${h} 75% 46%), hsl(${h2} 78% 44%))`;
            };
            const btn = (href, text, key) =>
              `<a class="tool" href="${href}" target="_blank" rel="noopener" style="background:${grad(key)}">${text} ✨</a>`;

            // Build buttons
            const buttons = [];
            for (const f of direct) buttons.push(btn(`/tools/${encodeURIComponent(f)}`, label(f), f));
            for (const d of subidx) buttons.push(btn(`/tools/${encodeURIComponent(d)}/`, d, d));
            buttons.sort((a,b) => a.localeCompare(b));

            // Page chrome
            const updated = new Date().toISOString().replace(/\.\d{3}Z$/,'Z');
            const css = `
            :root{ --bg:#0f1220; --panel:#14182a; --ink:#e9ecf8; --shadow:0 16px 40px rgba(0,0,0,.38) }
            @media (prefers-color-scheme: light){ :root{ --bg:#f6f7fb; --panel:#fff; --ink:#0f1426; --shadow:0 18px 40px rgba(12,24,60,.08) } }
            *{box-sizing:border-box} html,body{height:100%}
            body{margin:0;color:var(--ink);font-family:-apple-system,system-ui,Segoe UI,Roboto,Helvetica,Arial,Apple Color Emoji,Segoe UI Emoji;
                 background:radial-gradient(1200px 520px at 0% -10%, rgba(110,86,207,.25), transparent 60%),
                            radial-gradient(900px 360px at 110% 0%, rgba(69,231,179,.20), transparent 60%),
