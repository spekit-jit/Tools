name: Build & Deploy Pages (root index for project repo)

on:
  push:                  # run on any push to this repo
  workflow_dispatch: {}  # allow manual runs

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Prepare _site (copy repo)
        run: |
          rm -rf _site
          mkdir -p _site
          shopt -s dotglob
          cp -r * _site || true

      - name: Generate root index.html (buttons)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Detect base path automatically:
            // - user/org site repo ends with .github.io -> base = ''
            // - project repo (like 'tools')          -> base = '/<repo>'
            const repo = process.env.GITHUB_REPOSITORY.split('/')[1];
            const isUserSite = /\.github\.io$/i.test(repo);
            const base = isUserSite ? '' : `/${repo}`;

            const siteRoot = '_site';

            // Read root entries from the artifact
            const entries = fs.readdirSync(siteRoot, { withFileTypes: true })
              // ignore CI folders
              .filter(e => !['.github','_site','node_modules'].includes(e.name));

            // Direct .html/.htm files (exclude index.html)
            const direct = entries
              .filter(e => e.isFile() && /\.html?$/i.test(e.name) && !/^index\.html?$/i.test(e.name))
              .map(e => e.name);

            // One-level subfolders that contain an index.html/htm
            const subidx = entries
              .filter(e => e.isDirectory())
              .map(d => {
                const p1 = path.join(siteRoot, d.name, 'index.html');
                const p2 = path.join(siteRoot, d.name, 'index.htm');
                return (fs.existsSync(p1) || fs.existsSync(p2)) ? d.name : null;
              })
              .filter(Boolean);

            // Visuals
            const label = s => s.replace(/\.html?$/i,'');
            const hue = s => { let h=2166136261>>>0; for(const ch of s){ h^=ch.charCodeAt(0); h=Math.imul(h,16777619)>>>0 } return h%360; };
            const grad = k => { const h=hue(k), h2=(h+24)%360; return `linear-gradient(180deg, hsl(${h} 75% 46%), hsl(${h2} 78% 44%))`; };
            const btn  = (href,text,key)=>`<a class="tool" href="${href}" target="_blank" rel="noopener" style="background:${grad(key)}">${text} ✨</a>`;

            const buttons = [
              ...direct.sort((a,b)=>a.localeCompare(b)).map(f => btn(`${base}/${encodeURIComponent(f)}`, label(f), f)),
              ...subidx.sort((a,b)=>a.localeCompare(b)).map(d => btn(`${base}/${encodeURIComponent(d)}/`, d, d)),
            ];

            const updated = new Date().toISOString().replace(/\.\d{3}Z$/,'Z');
            const html = `<!doctype html><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
            <title>tools</title><meta name="color-scheme" content="light dark">
            <style>
              :root{--bg:#0f1220;--panel:#14182a;--ink:#e9ecf8}
              @media (prefers-color-scheme:light){:root{--bg:#f6f7fb;--panel:#fff;--ink:#0f1426}}
              *{box-sizing:border-box}html,body{height:100%}
              body{margin:0;background:var(--bg);color:var(--ink);font-family:-apple-system,system-ui,Segoe UI,Roboto;display:flex;justify-content:center}
              .board{max-width:1000px;margin:16px;padding:16px;background:var(--panel);border-radius:14px;border:1px solid rgba(255,255,255,.08)}
              .grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(200px,1fr));gap:12px}
              a.tool{display:flex;align-items:center;justify-content:center;padding:14px 12px;min-height:56px;border-radius:12px;color:#fff;text-decoration:none;font-weight:600}
              a.tool:hover{opacity:.9}
              .tiny{margin-top:10px;font:12px/1.3 ui-monospace,monospace;color:#9aa3bf;text-align:center}
            </style>
            <div class="board">
              <div class="grid">${buttons.join('')}</div>
              <div class="tiny">Last updated: ${updated} • ${buttons.length} link(s)</div>
            </div>`;

            // Write index at site root so https://spekit-jit.github.io/tools/ shows the buttons
            fs.writeFileSync(path.join(siteRoot, 'index.html'), html);
            core.info(`Root index generated with ${buttons.length} link(s). Base path: '${base}'`);

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
